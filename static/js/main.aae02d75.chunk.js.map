{"version":3,"sources":["selectors/NavigatorSelector.ts","containers/FrameContainer.tsx","actions/types/NavigatorActionTypes.ts","actions/NavigatorAction.ts","constants/path.ts","containers/NavigatorContainer.tsx","reducers/NavigatorReducer.ts","reducers/index.ts","App.tsx","index.tsx"],"names":["getState","state","navigator","getPath","createSelector","path","getIsOpen","isOpen","FrameComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","responseText","url","request","XMLHttpRequest","open","onreadystatechange","readyState","DONE","status","iframeComponent","document","getElementById","src","URL","createObjectURL","response","responseType","send","requestCORS","prevProps","react","id","React","NavigatorKeys","FrameContainer","connect","updatePath","type","UPDATE_PATH","toggleOpen","TOGGLE_OPEN","initialPath","NaviagtorComponent","inputPath","onChange","bind","assertThisInitialized","onClick","event","setState","target","value","className","style","height","NavigatorContainer","dispatch","bindActionCreators","initialNavigatorState","reducers","combineReducers","arguments","length","undefined","action","objectSpread","App","_React$Component","apply","inherits","createClass","key","es","store","createStore","applyMiddleware","thunk","NavigatorContainer_NavigatorContainer","FrameContainer_FrameContainer","ReactDOM","render","react_default","a","createElement","App_App"],"mappings":"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","file":"static/js/main.aae02d75.chunk.js","sourcesContent":["import {\n\tcreateSelector,\n} from 'reselect';\n\nimport {\n\tState,\n} from '../reducers';\n\nconst getState = (state: State) => {\n\treturn state.navigator;\n};\n\nexport const getPath = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.path;\n});\n\nexport const getIsOpen = createSelector([\n\tgetState,\n], (state) => {\n\treturn state.isOpen;\n});\n","import * as React from 'react';\n\nimport {\n\tconnect,\n} from 'react-redux';\n\nimport {\n\tgetPath,\n} from '../selectors';\n\nimport {\n\tState,\n} from '../reducers';\n\nimport './FrameContainer.css';\n\ninterface ComponentProps {\n\tpath: ReturnType<typeof getPath>;\n}\n\ninterface ComponentState {\n\tresponseText: string;\n}\nclass FrameComponent extends React.Component<ComponentProps, ComponentState> {\n\tconstructor(props: ComponentProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tresponseText: '',\n\t\t};\n\t}\n\n\tprivate requestCORS(url: string) {\n\t\tconst addressForCORS = 'https://cors-anywhere.herokuapp.com/';\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.open('GET', addressForCORS + url);\n\t\trequest.onreadystatechange = () => {\n\t\t\tif(request.readyState === request.DONE) {\n\t\t\t\tif (request.status === 200) {\n\t\t\t\t\tconst iframeComponent = document.getElementById('iframe') as HTMLIFrameElement;\n\t\t\t\t\tif(iframeComponent === null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tiframeComponent.src = URL.createObjectURL(request.response);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\trequest.responseType = 'blob';\n\t\trequest.send();\n\t}\n\n\tpublic componentDidMount() {\n\t\tconst {\n\t\t\tpath,\n\t\t} = this.props;\n\n\t\tthis.requestCORS(path);\n\t}\n\n\tpublic componentDidUpdate(prevProps: ComponentProps) {\n\t\tconst {\n\t\t\tpath,\n\t\t} = this.props;\n\n\t\tif(prevProps.path !== path){\n\t\t\tthis.requestCORS(path);\n\t\t}\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<iframe\n\t\t\t\tid={'iframe'}\n\t\t\t\tsrc={''}\n\t\t\t>\n\t\t\t\t<p>\n\t\t\t\t\t{'Your browser does not support iframes.'}\n\t\t\t\t</p>\n\t\t\t</iframe>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state: State) {\n\treturn {\n\t\tpath: getPath(state),\n\t};\n}\n\nexport const FrameContainer = connect(mapStateToProps)(FrameComponent);\n","export enum NavigatorKeys {\n\tUPDATE_PATH = 'UPDATE_PATH',\n\tTOGGLE_OPEN = 'TOGGLE_OPEN',\n}\n\nexport interface UpdatePathAction {\n\ttype: NavigatorKeys.UPDATE_PATH;\n\tpath: string;\n}\n\nexport interface ToggleOpenAction {\n\ttype: NavigatorKeys.TOGGLE_OPEN;\n}\n\nexport type NavigatorAction = (\n\t| UpdatePathAction\n\t| ToggleOpenAction\n);\n","import {\n\tNavigatorKeys,\n\tUpdatePathAction,\n\tToggleOpenAction,\n} from './types';\n\nexport function updatePath(path: string): UpdatePathAction {\n\treturn {\n\t\ttype: NavigatorKeys.UPDATE_PATH,\n\t\tpath: path,\n\t};\n}\n\nexport function toggleOpen(): ToggleOpenAction {\n\treturn {\n\t\ttype: NavigatorKeys.TOGGLE_OPEN,\n\t};\n}\n","export const initialPath = 'https://naver.com';\n","import * as React from 'react';\n\nimport {\n\tDispatch,\n\tAnyAction,\n\tbindActionCreators,\n} from 'redux';\n\nimport {\n\tconnect,\n} from 'react-redux';\n\nimport {\n\tupdatePath,\n\ttoggleOpen,\n} from '../actions';\n\nimport {\n\tState,\n} from '../reducers';\n\nimport {\n\tgetIsOpen,\n} from '../selectors';\n\nimport {\n\tinitialPath,\n} from '../constants/path';\n\nimport './NavigatorContainer.css';\n\ninterface ComponentProps {\n\tisOpen: boolean;\n\n\tupdatePath: typeof updatePath;\n\ttoggleOpen: typeof toggleOpen;\n}\n\ninterface ComponentState {\n\tinputPath: string;\n}\n\nclass NaviagtorComponent extends React.Component<ComponentProps, ComponentState> {\n\tconstructor(props: ComponentProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinputPath: initialPath,\n\t\t};\n\t\tthis.onChange = this.onChange.bind(this);\n\t\tthis.onClick = this.onClick.bind(this);\n\t}\n\n\tprivate onChange(event: React.ChangeEvent<HTMLInputElement>) {\n\t\tthis.setState({\n\t\t\tinputPath: event.target.value,\n\t\t});\n\t}\n\n\tprivate onClick() {\n\t\tconst {\n\t\t\tinputPath,\n\t\t} = this.state;\n\t\tthis.props.updatePath(inputPath);\n\t}\n\n\tpublic render() {\n\t\tconst {\n\t\t\tinputPath,\n\t\t} = this.state;\n\n\t\tconst {\n\t\t\tisOpen,\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={'navigator'}\n\t\t\t\tstyle={{\n\t\t\t\t\theight: isOpen ? '300px' : '100px',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<button\n\t\t\t\t\ttype={'button'}\n\t\t\t\t\tonClick={this.props.toggleOpen}\n\t\t\t\t>\n\t\t\t\t\t{'toggle'}\n\t\t\t\t</button>\n\t\t\t\t<input\n\t\t\t\t\ttype={'text'}\n\t\t\t\t\tvalue={inputPath}\n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\ttype={'button'}\n\t\t\t\t\tonClick={this.onClick}\n\t\t\t\t>\n\t\t\t\t\t{'Go'}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state: State) {\n\treturn {\n\t\tisOpen: getIsOpen(state),\n\t};\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n\treturn bindActionCreators({\n\t\tupdatePath,\n\t\ttoggleOpen,\n\t}, dispatch);\n}\n\nexport const NavigatorContainer = connect(mapStateToProps, mapDispatchToProps)(NaviagtorComponent);\n","import {\n\tNavigatorAction,\n\tNavigatorKeys,\n} from '../actions/types';\n\nimport {\n\tinitialPath,\n} from '../constants/path';\n\nexport interface NavigatorState {\n\tpath: string;\n\tisOpen: boolean;\n}\n\nconst initialNavigatorState: NavigatorState = {\n\tpath: initialPath,\n\tisOpen: true,\n};\n\nexport function navigator(state = initialNavigatorState, action: NavigatorAction) {\n\tconst {\n\t\tisOpen,\n\t} = state;\n\n\tswitch(action.type) {\n\t\tcase NavigatorKeys.UPDATE_PATH:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpath: action.path,\n\t\t\t};\n\t\tcase NavigatorKeys.TOGGLE_OPEN:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisOpen: !isOpen,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import {\n\tcombineReducers,\n} from 'redux';\n\nimport {\n\tNavigatorState,\n\tnavigator,\n} from './NavigatorReducer';\n\nexport interface State {\n\tnavigator: NavigatorState;\n}\n\nexport const reducers = combineReducers<State>({\n\tnavigator,\n});\n","import * as React from 'react';\n\nimport {\n\tcreateStore,\n\tapplyMiddleware,\n} from 'redux';\n\nimport {\n\tProvider,\n} from 'react-redux';\n\nimport thunk from 'redux-thunk';\n\nimport {\n\tFrameContainer, NavigatorContainer,\n} from './containers';\n\nimport {\n\treducers,\n} from './reducers';\n\nimport './App.css';\n\nexport class App extends React.Component {\n\tpublic render() {\n\t\treturn (\n\t\t\t<Provider\n\t\t\t\tstore={createStore(reducers, applyMiddleware(thunk))}\n\t\t\t>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<NavigatorContainer\t/>\n\t\t\t\t\t<FrameContainer />\n\t\t\t\t</div>\n\t\t\t</Provider>\n\t\t);\n\t}\n}\n","import React from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\n\r\nimport {\r\n\tApp,\r\n} from './App';\r\n\r\nReactDOM.render(\r\n\t<App />,\r\n\tdocument.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}